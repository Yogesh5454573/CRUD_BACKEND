{"{\"assumptions\":{},\"sourceRoot\":\"F:\\\\CRUD\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"F:\\\\CRUD\",\"filename\":\"F:\\\\CRUD\\\\index.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"F:\\\\CRUD\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.25.2:development":{"value":{"code":"// Import necessary modules\nimport express from \"express\"; // Import Express framework\nimport mongoose from \"mongoose\"; // Import Mongoose for MongoDB interactions\nimport bodyParser from \"body-parser\"; // Import Body-parser for parsing request bodies\nimport dotenv from \"dotenv\"; // Import dotenv for loading environment variables\n\n// Import routes\nimport route from \"./routes/userRoute.js\"; // Import user route file\n\nconst app = express(); // Initialize the express app\n\n// Use bodyParser to parse incoming JSON requests\napp.use(bodyParser.json());\ndotenv.config(); // Load environment variables\n\n// Set PORT and MongoDB URL from environment variables\nconst PORT = process.env.PORT || 5000;\nconst MONGOURL = process.env.MONGO_URL;\n\n// Connect to the MongoDB database\nmongoose.connect(MONGOURL, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}) // Include options for mongoose to avoid deprecation warnings\n.then(() => {\n  console.log(\"Database connected successfully.\"); // Log success message\n  app.listen(PORT, () => {\n    console.log(`Server is running on port : ${PORT}`); // Log server running message\n  });\n}).catch(error => console.log(error)); // Log error if connection fails\n\n// Use the user routes for handling user-related requests\napp.use(\"/api/user\", route); // Correct line to use user routes\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzIiwibW9uZ29vc2UiLCJib2R5UGFyc2VyIiwiZG90ZW52Iiwicm91dGUiLCJhcHAiLCJ1c2UiLCJqc29uIiwiY29uZmlnIiwiUE9SVCIsInByb2Nlc3MiLCJlbnYiLCJNT05HT1VSTCIsIk1PTkdPX1VSTCIsImNvbm5lY3QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJ0aGVuIiwiY29uc29sZSIsImxvZyIsImxpc3RlbiIsImNhdGNoIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IkY6XFxDUlVEXFwiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydCBuZWNlc3NhcnkgbW9kdWxlc1xyXG5pbXBvcnQgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiOyAvLyBJbXBvcnQgRXhwcmVzcyBmcmFtZXdvcmtcclxuaW1wb3J0IG1vbmdvb3NlIGZyb20gXCJtb25nb29zZVwiOyAvLyBJbXBvcnQgTW9uZ29vc2UgZm9yIE1vbmdvREIgaW50ZXJhY3Rpb25zXHJcbmltcG9ydCBib2R5UGFyc2VyIGZyb20gXCJib2R5LXBhcnNlclwiOyAvLyBJbXBvcnQgQm9keS1wYXJzZXIgZm9yIHBhcnNpbmcgcmVxdWVzdCBib2RpZXNcclxuaW1wb3J0IGRvdGVudiBmcm9tIFwiZG90ZW52XCI7IC8vIEltcG9ydCBkb3RlbnYgZm9yIGxvYWRpbmcgZW52aXJvbm1lbnQgdmFyaWFibGVzXHJcblxyXG4vLyBJbXBvcnQgcm91dGVzXHJcbmltcG9ydCByb3V0ZSBmcm9tIFwiLi9yb3V0ZXMvdXNlclJvdXRlLmpzXCI7IC8vIEltcG9ydCB1c2VyIHJvdXRlIGZpbGVcclxuXHJcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTsgLy8gSW5pdGlhbGl6ZSB0aGUgZXhwcmVzcyBhcHBcclxuXHJcbi8vIFVzZSBib2R5UGFyc2VyIHRvIHBhcnNlIGluY29taW5nIEpTT04gcmVxdWVzdHNcclxuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XHJcblxyXG5kb3RlbnYuY29uZmlnKCk7IC8vIExvYWQgZW52aXJvbm1lbnQgdmFyaWFibGVzXHJcblxyXG4vLyBTZXQgUE9SVCBhbmQgTW9uZ29EQiBVUkwgZnJvbSBlbnZpcm9ubWVudCB2YXJpYWJsZXNcclxuY29uc3QgUE9SVCA9IHByb2Nlc3MuZW52LlBPUlQgfHwgNTAwMDtcclxuY29uc3QgTU9OR09VUkwgPSBwcm9jZXNzLmVudi5NT05HT19VUkw7XHJcblxyXG4vLyBDb25uZWN0IHRvIHRoZSBNb25nb0RCIGRhdGFiYXNlXHJcbm1vbmdvb3NlXHJcbiAgLmNvbm5lY3QoTU9OR09VUkwsIHsgdXNlTmV3VXJsUGFyc2VyOiB0cnVlLCB1c2VVbmlmaWVkVG9wb2xvZ3k6IHRydWUgfSkgLy8gSW5jbHVkZSBvcHRpb25zIGZvciBtb25nb29zZSB0byBhdm9pZCBkZXByZWNhdGlvbiB3YXJuaW5nc1xyXG4gIC50aGVuKCgpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKFwiRGF0YWJhc2UgY29ubmVjdGVkIHN1Y2Nlc3NmdWxseS5cIik7IC8vIExvZyBzdWNjZXNzIG1lc3NhZ2VcclxuICAgIGFwcC5saXN0ZW4oUE9SVCwgKCkgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhgU2VydmVyIGlzIHJ1bm5pbmcgb24gcG9ydCA6ICR7UE9SVH1gKTsgLy8gTG9nIHNlcnZlciBydW5uaW5nIG1lc3NhZ2VcclxuICAgIH0pO1xyXG4gIH0pXHJcbiAgLmNhdGNoKChlcnJvcikgPT4gY29uc29sZS5sb2coZXJyb3IpKTsgLy8gTG9nIGVycm9yIGlmIGNvbm5lY3Rpb24gZmFpbHNcclxuXHJcbi8vIFVzZSB0aGUgdXNlciByb3V0ZXMgZm9yIGhhbmRsaW5nIHVzZXItcmVsYXRlZCByZXF1ZXN0c1xyXG5hcHAudXNlKFwiL2FwaS91c2VyXCIsIHJvdXRlKTsgLy8gQ29ycmVjdCBsaW5lIHRvIHVzZSB1c2VyIHJvdXRlc1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsT0FBT0EsT0FBTyxNQUFNLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLE9BQU9DLFFBQVEsTUFBTSxVQUFVLENBQUMsQ0FBQztBQUNqQyxPQUFPQyxVQUFVLE1BQU0sYUFBYSxDQUFDLENBQUM7QUFDdEMsT0FBT0MsTUFBTSxNQUFNLFFBQVEsQ0FBQyxDQUFDOztBQUU3QjtBQUNBLE9BQU9DLEtBQUssTUFBTSx1QkFBdUIsQ0FBQyxDQUFDOztBQUUzQyxNQUFNQyxHQUFHLEdBQUdMLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFdkI7QUFDQUssR0FBRyxDQUFDQyxHQUFHLENBQUNKLFVBQVUsQ0FBQ0ssSUFBSSxDQUFDLENBQUMsQ0FBQztBQUUxQkosTUFBTSxDQUFDSyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBRWpCO0FBQ0EsTUFBTUMsSUFBSSxHQUFHQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0YsSUFBSSxJQUFJLElBQUk7QUFDckMsTUFBTUcsUUFBUSxHQUFHRixPQUFPLENBQUNDLEdBQUcsQ0FBQ0UsU0FBUzs7QUFFdEM7QUFDQVosUUFBUSxDQUNMYSxPQUFPLENBQUNGLFFBQVEsRUFBRTtFQUFFRyxlQUFlLEVBQUUsSUFBSTtFQUFFQyxrQkFBa0IsRUFBRTtBQUFLLENBQUMsQ0FBQyxDQUFDO0FBQUEsQ0FDdkVDLElBQUksQ0FBQyxNQUFNO0VBQ1ZDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGtDQUFrQyxDQUFDLENBQUMsQ0FBQztFQUNqRGQsR0FBRyxDQUFDZSxNQUFNLENBQUNYLElBQUksRUFBRSxNQUFNO0lBQ3JCUyxPQUFPLENBQUNDLEdBQUcsQ0FBQywrQkFBK0JWLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztFQUN0RCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMsQ0FDRFksS0FBSyxDQUFFQyxLQUFLLElBQUtKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBRXpDO0FBQ0FqQixHQUFHLENBQUNDLEdBQUcsQ0FBQyxXQUFXLEVBQUVGLEtBQUssQ0FBQyxDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=","map":{"version":3,"names":["express","mongoose","bodyParser","dotenv","route","app","use","json","config","PORT","process","env","MONGOURL","MONGO_URL","connect","useNewUrlParser","useUnifiedTopology","then","console","log","listen","catch","error"],"sourceRoot":"F:\\CRUD\\","sources":["index.js"],"sourcesContent":["// Import necessary modules\r\nimport express from \"express\"; // Import Express framework\r\nimport mongoose from \"mongoose\"; // Import Mongoose for MongoDB interactions\r\nimport bodyParser from \"body-parser\"; // Import Body-parser for parsing request bodies\r\nimport dotenv from \"dotenv\"; // Import dotenv for loading environment variables\r\n\r\n// Import routes\r\nimport route from \"./routes/userRoute.js\"; // Import user route file\r\n\r\nconst app = express(); // Initialize the express app\r\n\r\n// Use bodyParser to parse incoming JSON requests\r\napp.use(bodyParser.json());\r\n\r\ndotenv.config(); // Load environment variables\r\n\r\n// Set PORT and MongoDB URL from environment variables\r\nconst PORT = process.env.PORT || 5000;\r\nconst MONGOURL = process.env.MONGO_URL;\r\n\r\n// Connect to the MongoDB database\r\nmongoose\r\n  .connect(MONGOURL, { useNewUrlParser: true, useUnifiedTopology: true }) // Include options for mongoose to avoid deprecation warnings\r\n  .then(() => {\r\n    console.log(\"Database connected successfully.\"); // Log success message\r\n    app.listen(PORT, () => {\r\n      console.log(`Server is running on port : ${PORT}`); // Log server running message\r\n    });\r\n  })\r\n  .catch((error) => console.log(error)); // Log error if connection fails\r\n\r\n// Use the user routes for handling user-related requests\r\napp.use(\"/api/user\", route); // Correct line to use user routes\r\n"],"mappings":"AAAA;AACA,OAAOA,OAAO,MAAM,SAAS,CAAC,CAAC;AAC/B,OAAOC,QAAQ,MAAM,UAAU,CAAC,CAAC;AACjC,OAAOC,UAAU,MAAM,aAAa,CAAC,CAAC;AACtC,OAAOC,MAAM,MAAM,QAAQ,CAAC,CAAC;;AAE7B;AACA,OAAOC,KAAK,MAAM,uBAAuB,CAAC,CAAC;;AAE3C,MAAMC,GAAG,GAAGL,OAAO,CAAC,CAAC,CAAC,CAAC;;AAEvB;AACAK,GAAG,CAACC,GAAG,CAACJ,UAAU,CAACK,IAAI,CAAC,CAAC,CAAC;AAE1BJ,MAAM,CAACK,MAAM,CAAC,CAAC,CAAC,CAAC;;AAEjB;AACA,MAAMC,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;AACrC,MAAMG,QAAQ,GAAGF,OAAO,CAACC,GAAG,CAACE,SAAS;;AAEtC;AACAZ,QAAQ,CACLa,OAAO,CAACF,QAAQ,EAAE;EAAEG,eAAe,EAAE,IAAI;EAAEC,kBAAkB,EAAE;AAAK,CAAC,CAAC,CAAC;AAAA,CACvEC,IAAI,CAAC,MAAM;EACVC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC,CAAC,CAAC;EACjDd,GAAG,CAACe,MAAM,CAACX,IAAI,EAAE,MAAM;IACrBS,OAAO,CAACC,GAAG,CAAC,+BAA+BV,IAAI,EAAE,CAAC,CAAC,CAAC;EACtD,CAAC,CAAC;AACJ,CAAC,CAAC,CACDY,KAAK,CAAEC,KAAK,IAAKJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC;;AAEzC;AACAjB,GAAG,CAACC,GAAG,CAAC,WAAW,EAAEF,KAAK,CAAC,CAAC,CAAC","ignoreList":[]}},"mtime":1725856746222}}